<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#
    var maximumItems = 16;

    string ParameterDocs(int index, string prefix)
    {
        var builder = new StringBuilder(prefix);
        builder.Append("<param name=\"head\">The head of the chain.</param>");
        for (var i = 1; i < index; i++)
        {
            builder
                .AppendLine()
                .Append(prefix)
                .Append("<param name=\"item")
                .Append(i)
                .Append("\">Item ")
                .Append(i)
                .Append(".</param>");
        }
        return builder.ToString();
    }

    string ParameterTypeDocs(int index, string prefix)
    {
        var builder = new StringBuilder(prefix);
        builder.Append("<typeparam name=\"TChain\">The chain type</typeparam>");
        for (var i = 1; i < index; i++)
        {
            builder
                .AppendLine()
                .Append(prefix)
                .Append("<typeparam name=\"T")
                .Append(i)
                .Append("\">Type of Item ")
                .Append(i)
                .Append(".</typeparam>");
        }
        return builder.ToString();
    }

    string TypeList(int index)
    {
        var builder = new StringBuilder("TChain");
        for (var i = 1; i < index; i++)
        {
            builder
                .Append(", T")
                .Append(i);
        }
        return builder.ToString();
    }

    string ParamList(int index)
    {
        var builder = new StringBuilder("TChain head = default");
        for (var i = 1; i < index; i++)
        {
            builder
                .Append(", T")
                .Append(i)
                .Append(" item")
                .Append(i)
                .Append(" = default");
        }
        return builder.ToString();
    }

    string ArgList(int index)
    {
        var builder = new StringBuilder("head");
        for (var i = 1; i < index; i++)
        {
            builder
                .Append(", item")
                .Append(i);
        }
        return builder.ToString();
    }

    string ConstraintList(int index, string prefix)
    {
        var builder = new StringBuilder(prefix);
        builder.Append("where TChain : unmanaged,  IChainStart");
        for (var i = 1; i < index; i++)
        {
            builder
                .AppendLine()
                .Append(prefix)
                .Append("where T")
                .Append(i)
                .Append(" : unmanaged, IExtendsChain<TChain>");
        }
        return builder.ToString();
    }

    string ConstraintListLoose(int index, string prefix)
    {
        var builder = new StringBuilder(prefix);
        builder.Append("where TChain : unmanaged, IChainable");
        for (var i = 1; i < index; i++)
        {
            builder
                .AppendLine()
                .Append(prefix)
                .Append("where T")
                .Append(i)
                .Append(" : unmanaged,  IChainable");
        }
        return builder.ToString();
    }
#>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

// ReSharper disable StaticMemberInGenericType
#pragma warning disable CS0659, CS0660
using Silk.NET.Core.Native;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace Silk.NET.Vulkan;

/// <summary>
/// Base class for all <see cref="Chain{T}">Managed Chains</see>.
/// </summary>
public abstract unsafe partial class Chain
{
    /// <summary>
    /// Gets the maximum supported chain <see cref="Count"/>.
    /// </summary>
    public static readonly int MaximumCount = <#=maximumItems#>;

<#
    for (var i = 1; i <= maximumItems; i++)
    {
        var tList = TypeList(i);
        var pDocs = ParameterDocs(i, "    /// ");
        var pTypeDocs = ParameterTypeDocs(i, "    /// ");
        var constraints = ConstraintList(i, "        ");
        var constraintsLoose = ConstraintListLoose(i, "        ");
#>
    /// <summary>
    /// Creates a new <see cref="Chain{<#= tList #>}"/> with <#= i #> items.
    /// </summary>
<#= pDocs #>
<#= pTypeDocs #>
    /// <returns>A new <see cref="Chain{<#= tList #>}"/> with <#= i #> items.</returns>
    /// <seealso cref="CreateAny{<#= tList #>}(<#= tList #>)" />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Chain<<#= tList #>> Create<<#= tList #>>(<#= ParamList(i) #>)
<#= constraints #>
        => new(<#= ArgList(i) #>);

    /// <summary>
    /// Creates a new <see cref="Chain{<#= tList #>}"/> with <#= i #> items.
    /// </summary>
<#= pDocs #>
<#= pTypeDocs #>
    /// <returns>A new <see cref="Chain{<#= tList #>}"/> with <#= i #> items.</returns>
    /// <remarks><para>The `Any` versions of chain methods do not validate that items belong in the chain, this is
    /// useful for situations where the specification does not indicate required chain constraints. You should generally
    /// try to use the none `Any` version in preference.</para></remarks>
    /// <seealso cref="Create{<#= tList #>}(<#= tList #>)" />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Chain<<#= tList #>> CreateAny<<#= tList #>>(<#= ParamList(i) #>)
<#= constraintsLoose #>
        => new(<#= ArgList(i) #>);

    /// <summary>
    /// Loads a new <see cref="Chain{<#= tList #>}"/> with <#= i #> items from an existing unmanaged chain,
    /// ignoring any errors.
    /// </summary>
    /// <param name="chain">The unmanaged chain to use as the basis of this chain.</param>
    /// <returns>A new <see cref="Chain{<#= tList #>}"/> with <#= i #> items.</returns>
    /// <seealso cref="LoadAny{<#= tList #>}(TChain)" />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Chain<<#= tList #>> Load<<#= tList #>>(TChain chain)
<#= constraints #>
        => LoadAny<<#= tList #>>(chain);

    /// <summary>
    /// Loads a new <see cref="Chain{<#= tList #>}"/> with <#= i #> items from an existing unmanaged chain,
    /// ignoring any errors.
    /// </summary>
    /// <param name="chain">The unmanaged chain to use as the basis of this chain.</param>
    /// <returns>A new <see cref="Chain{<#= tList #>}"/> with <#= i #> items.</returns>
    /// <remarks><para>The `Any` versions of chain methods do not validate that items belong in the chain, this is
    /// useful for situations where the specification does not indicate required chain constraints. You should generally
    /// try to use the none `Any` version in preference.</para></remarks>
    /// <seealso cref="Load{<#= tList #>}(TChain)" />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Chain<<#= tList #>> LoadAny<<#= tList #>>(TChain chain)
<#= constraintsLoose #>
    {
        var size = Chain<<#= tList #>>.MemorySize;
        var newHeadPtr = SilkMarshal.Allocate(size);
        chain.StructureType();
        *((TChain*)newHeadPtr) = chain;
<#
        if (i > 1)
        {
#>
        var existingPtr = (BaseInStructure*) Unsafe.AsPointer(ref chain);
        var newPtr = (BaseInStructure*) newHeadPtr;
<#
            for (var j = 1; j < i; j++)
            {
#>

        existingPtr = existingPtr->PNext;
        newPtr->PNext = (BaseInStructure*) (newHeadPtr + Chain<<#= tList #>>.Item<#= j #>Offset);
        newPtr = newPtr->PNext;

        T<#= j #> item<#= j #> = default;
        <#= j == 1 ? "var " : "" #>expectedStructureType = item<#= j #>.StructureType();
        if (existingPtr is not null &&
            existingPtr->SType == expectedStructureType) {
<#
                if (j == i - 1)
                {
#>
            if (existingPtr->PNext is not null) {
                existingPtr->PNext = null;
            }
<#
                } // if (j == i -1)
#>
            item<#= j #> = Unsafe.AsRef<T<#= j #>>(existingPtr);
        }
        *((T<#= j #>*)newPtr) = item<#= j #>;
<#
            } // for (int j = 1; j < i; j++) {
        } // if (i == 1) {} else {...
#>
        return new Chain<<#= tList #>>(newHeadPtr);
    }

    /// <summary>
    /// Loads a new <see cref="Chain{<#= tList #>}"/> with <#= i #> items from an existing unmanaged chain.
    /// </summary>
    /// <param name="errors">Any errors loading the chain.</param>
    /// <param name="chain">The unmanaged chain to use as the basis of this chain.</param>
    /// <returns>A new <see cref="Chain{<#= tList #>}"/> with <#= i #> items.</returns>
    /// <seealso cref="LoadAny{<#= tList #>}(out string, TChain)" />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Chain<<#= tList #>> Load<<#= tList #>>(out string errors, TChain chain)
<#= constraints #>
        => LoadAny<<#= tList #>>(out errors, chain);

    /// <summary>
    /// Loads a new <see cref="Chain{<#= tList #>}"/> with <#= i #> items from an existing unmanaged chain.
    /// </summary>
    /// <param name="errors">Any errors loading the chain.</param>
    /// <param name="chain">The unmanaged chain to use as the basis of this chain.</param>
    /// <returns>A new <see cref="Chain{<#= tList #>}"/> with <#= i #> items.</returns>
    /// <remarks><para>The `Any` versions of chain methods do not validate that items belong in the chain, this is
    /// useful for situations where the specification does not indicate required chain constraints. You should generally
    /// try to use the none `Any` version in preference.</para></remarks>
    /// <seealso cref="Load{<#= tList #>}(out string, TChain)" />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Chain<<#= tList #>> LoadAny<<#= tList #>>(out string errors, TChain chain)
<#= constraintsLoose #>
    {
        var size = Chain<<#= tList #>>.MemorySize;
        var newHeadPtr = SilkMarshal.Allocate(size);
        chain.StructureType();
        *((TChain*)newHeadPtr) = chain;
<#
        if (i == 1)
        {
#>
        errors = string.Empty;
<#
        }
        else
        {
#>
        var errorBuilder = new StringBuilder();
        var existingPtr = (BaseInStructure*) Unsafe.AsPointer(ref chain);
        var newPtr = (BaseInStructure*) newHeadPtr;
<#
            for (var j = 1; j < i; j++)
            {
#>

        existingPtr = existingPtr->PNext;
        newPtr->PNext = (BaseInStructure*) (newHeadPtr + Chain<<#= tList #>>.Item<#= j #>Offset);
        newPtr = newPtr->PNext;

        T<#= j #> item<#= j #> = default;
        <#= j == 1 ? "var " : "" #>expectedStructureType = item<#= j #>.StructureType();
        if (existingPtr is null) {
            errorBuilder.AppendLine("The unmanaged chain was length <#= j #>, expected length <#= i #>");
        } else {
            if (existingPtr->SType != expectedStructureType) {
                errorBuilder.Append("The unmanaged chain has a structure type ")
                    .Append(existingPtr->SType)
                    .Append(" at position <#= j + 1 #>; expected ")
                    .Append(expectedStructureType)
                    .AppendLine();
            } else {
<#
                if (j == i - 1)
                {
#>
                if (existingPtr->PNext is not null) {
                    errorBuilder.AppendLine("The unmanaged chain was longer than the expected length <#= i #>");
                    existingPtr->PNext = null;
                }
<#
                } // if (j == i -1)
#>
                item<#= j #> = Unsafe.AsRef<T<#= j #>>(existingPtr);
            }
        }
        *((T<#= j #>*)newPtr) = item<#= j #>;
<#
            } // for (int j = 1; j < i; j++) {
#>

        // Create string of errors
        errors = errorBuilder.ToString().Trim();
<#
        } // if (i == 1) {} else {...
#>
        return new Chain<<#= tList #>>(newHeadPtr);
    }

<#
    } // for (var i = 1; i <= maximumItems; i++)
#>
}
<#
    for (var i = 1; i <= maximumItems; i++)
    {
        var tList = TypeList(i);
        var pDocs = ParameterDocs(i, "    /// ");
#>

/// <summary>
/// A <see cref="Chain{<#= tList #>}"/> safely manages the pointers of a managed structure chain.
/// </summary>
<#= ParameterTypeDocs(i, "/// ") #>
public unsafe sealed class Chain<<#= tList #>> : Chain, IEquatable<Chain<<#= tList #>>>
<#= ConstraintListLoose(i, "    ") #>
{
    /// <summary>
    /// Gets the size (in bytes) of the default structure header.
    /// </summary>
    public static readonly int HeaderSize = sizeof(BaseInStructure);

    /// <summary>
    /// Gets the size (in bytes) of the head structure.
    /// </summary>
    public static readonly int HeadSize = sizeof(TChain);
<#
        for (var j = 1; j < i; j++)
        {
#>

    /// <summary>
    /// Gets the offset to the start of <see cref="Item1"/>.
    /// </summary>
    public static readonly int Item<#= j #>Offset = <#= j == 1 ? "HeadSize" : $"Item{j - 1}Offset + Item{j - 1}Size" #>;

    /// <summary>
    /// Gets the size (in bytes) of the Item 1.
    /// </summary>
    public static readonly int Item<#= j #>Size = sizeof(T<#= j #>);
<#
        } // for (int j = 1; j < i; j++) {
#>

    /// <summary>
    /// Gets the total size (in bytes) of the unmanaged memory, managed by this chain.
    /// </summary>
    public static readonly int MemorySize = <#= i == 1 ? "HeadSize" : $"Item{i - 1}Offset + Item{i - 1}Size" #>;
        
    /// <inheritdoc/>
    public override int Size => MemorySize;

    private nint _headPtr;

    /// <inheritdoc/>
    public override BaseInStructure* HeadPtr => (BaseInStructure*) _headPtr;

    /// <summary>
    /// Gets or sets the head of the chain.
    /// </summary>
    public TChain Head
    {
        get => Unsafe.AsRef<TChain>((BaseInStructure*) _headPtr);
        set
        {
            value.StructureType();
            var ptr = (BaseInStructure*) _headPtr;
            var nextPtr = ptr->PNext;
            *((TChain*)_headPtr) = value;
            ptr->PNext = nextPtr;
        }
    }
<#
        for (var j = 1; j < i; j++)
        {
#>

    /// <summary>
    /// Gets a pointer to the second item in the chain.
    /// </summary>
    public BaseInStructure* Item<#= j #>Ptr => (BaseInStructure*) (_headPtr + Item<#= j #>Offset);

    /// <summary>
    /// Gets or sets item #<#= j #> in the chain.
    /// </summary>
    public T<#= j #> Item<#= j #>
    {
        get => Unsafe.AsRef<T<#= j #>>(Item<#= j #>Ptr);
        set
        {
            value.StructureType();
            var ptr = Item<#= j #>Ptr;
            var nextPtr = ptr->PNext;
            *((T<#= j #>*)ptr) = value;
            ptr->PNext = nextPtr;
        }
    }
<#
        } // for (int j = 1; j < i; j++) {
#>

    /// <summary>
    /// Creates a new <see cref="Chain{<#= tList #>}"/> with <#= i #> items from an existing memory block.
    /// </summary>
    /// <param name="headPtr">The pointer to the head of the chain.</param>
    /// <remarks>
    /// Callers are responsible for ensuring the size of the memory is correct.
    /// </remarks>
    internal Chain(nint headPtr)
    {
        _headPtr = headPtr;
    }

    /// <summary>
    /// Finalizer ensures we always release the memory.
    /// </summary>
    ~Chain() => Dispose(false);

    /// <summary>
    /// Creates a new <see cref="Chain{<#= tList #>}"/> with <#= i #> items.
    /// </summary>
<#= pDocs #>
    internal Chain(<#= ParamList(i) #>)
        : this(SilkMarshal.Allocate(MemorySize))
    {
        head.StructureType();
        *((TChain*)_headPtr) = head;
<#
        for (var j = 1; j < i; j++)
        {
#>
        <#= j == 1 ? "var " : "" #>itemPtr = Item<#= j #>Ptr;
        item<#= j #>.StructureType();
        *((T<#= j #>*)itemPtr) = item<#= j #>;
        <#= j == 1 ? "HeadPtr" : $"Item{j - 1}Ptr" #>->PNext = itemPtr;
<#
        } // for (int j = 1; j < i; j++) {
#>
        <#= i == 1 ? "HeadPtr" : $"Item{i - 1}Ptr" #>->PNext = null;
    }

    /// <inheritdoc />
    public override Chain Clear(bool includeHead = true)
    {
        if (includeHead)
        {
            var head = default(TChain);
            head.StructureType();
            *((TChain*)_headPtr) = head;
            HeadPtr->PNext = <#= i == 1 ? "null" : "Item1Ptr" #>;
        }
<#
        for (var j = 1; j < i; j++)
        {
#>
        var item<#= j #> = default(T<#= j #>);
        item<#= j #>.StructureType();
        *((T<#= j #>*)Item<#= j #>Ptr) = item<#= j #>;
        Item<#= j #>Ptr->PNext = <#= j < i - 1 ? $"Item{j+1}Ptr":"null" #>;
<#
        } // for (int j = 1; j < i; j++) {
#>
        return this;
    }

    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    protected override Chain DoDuplicate() => Duplicate();

    /// <summary>
    /// Creates a new <see cref="Chain{<#= tList #>}"/> with <#= i #> items, by copying this instance.
    /// </summary>
    /// <remarks>
    /// Do not forget to <see cref="IDisposable">dispose</see> this chain if you are no longer using it.
    /// </remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public new Chain<<#= tList #>> Duplicate()
    {
        var size = MemorySize;
        var newHeadPtr = SilkMarshal.Allocate(size);
        // Block copy original struct data for speed
        System.Buffer.MemoryCopy((void*)_headPtr, (void*)newHeadPtr, size, size);
<#
        if (i > 1)
        {
#>
        // Update all pointers
        ((BaseInStructure*)newHeadPtr)->PNext = (BaseInStructure*) (newHeadPtr + Item1Offset); 
<#
        } // if (i > 1)
#>
<#
        for (var j = 2; j < i; j++)
        {
#>
        ((BaseInStructure*)(newHeadPtr + Item<#= j - 1 #>Offset))->PNext = (BaseInStructure*) (newHeadPtr + Item<#= j #>Offset); 
<#
        } // for (int j = 1; j < i; j++) {
#>
        return new Chain<<#= tList #>>(newHeadPtr);
    }

    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    protected override Chain DoAddAny<T>(T item = default)
<#
        if (i < maximumItems - 1)
        {
#>
        => AddAny<T>(item);
<#
        }
        else
        {
#>
        => throw new InvalidOperationException("Cannot add to chain of length <#=i#>.");
<#
        }
#>

<#
        if (i < maximumItems)
        {
            var bigTList = TypeList(i + 1);
#>
    /// <summary>
    /// Creates a new <see cref="Chain{<#= bigTList #>}"/> with <#= i + 1 #> items, by appending <paramref name="item<#= i #>"/> to
    /// the end of this instance.
    /// </summary>
    /// <param name="item<#= i #>">The item to append.</param>    
    /// <typeparam name="T<#= i #>">Type of the item.</typeparam>
    /// <remarks>
    /// <para>Do not forget to <see cref="IDisposable">dispose</see> this chain if you are no longer using it.
    /// </para><para>The `Any` versions of chain methods do not validate that items belong in the chain, this is
    /// useful for situations where the specification does not indicate required chain constraints. You should generally
    /// try to use the none `Any` version in preference.</para>
    /// </remarks>
    /// <seealso cref="AddAny{T<#= i #>}(T<#= i #>)" />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Chain<<#= bigTList #>> Add<T<#= i #>>(T<#= i #> item<#= i #> = default)
        where T<#= i #> : unmanaged, IExtendsChain<TChain>
        => AddAny(item<#= i #>);

    /// <summary>
    /// Creates a new <see cref="Chain{<#= bigTList #>}"/> with <#= i + 1 #> items, by appending <paramref name="item<#= i #>"/> to
    /// the end of this instance.
    /// </summary>
    /// <param name="item<#= i #>">The item to append.</param>
    /// <typeparam name="T<#= i #>">Type of the item.</typeparam>
    /// <remarks>
    /// <para>Do not forget to <see cref="IDisposable">dispose</see> this chain if you are no longer using it.
    /// </para><para>The `Any` versions of chain methods do not validate that items belong in the chain, this is
    /// useful for situations where the specification does not indicate required chain constraints. You should generally
    /// try to use the none `Any` version in preference.</para>
    /// </remarks>
    /// <seealso cref="Add{T<#= i #>}(T<#= i #>)" />
    public new Chain<<#= bigTList #>> AddAny<T<#= i #>>(T<#= i #> item<#= i #> = default)
        where T<#= i #> : unmanaged, IChainable
    {
        var previousSize = MemorySize;
        var newSize = Chain<<#= bigTList #>>.MemorySize;
        var newHeadPtr = SilkMarshal.Allocate(newSize);
        // Block copy original struct data for speed
        System.Buffer.MemoryCopy((void*)_headPtr, (void*)newHeadPtr, previousSize, previousSize);
        
        // Add item <#= i - 1 #>
        item<#= i #>.StructureType();
        *((T<#= i #>*)(newHeadPtr + previousSize)) = item<#= i #>;

        // Update all pointers
        ((BaseInStructure*)newHeadPtr)->PNext = (BaseInStructure*) (newHeadPtr + <#= (i == 1 ? $"Chain<{bigTList}>." : "") #>Item1Offset);
<#
            for (var j = 1; j < i; j++)
            {
#>
        ((BaseInStructure*)(newHeadPtr + Item<#= j #>Offset))->PNext = (BaseInStructure*) (newHeadPtr + <#= (j == i - 1 ? $"Chain<{bigTList}>." : "") #>Item<#= j + 1 #>Offset); 
<#
            } // for (int j = 1; j < i; j++) {
#>
        ((BaseInStructure*)(newHeadPtr + previousSize))->PNext = null;
        return new Chain<<#= bigTList #>>(newHeadPtr);
    }

<#
        } // if (i < maximumItems)
#>
    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    protected override Chain DoTruncateAny()
<#
        if (i > 1)
        {
#>
        => TruncateAny(out var _);
<#
        }
        else
        {
#>
        => throw new InvalidOperationException("Cannot truncate chain of length 1.");
<#
        }
#>

    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    protected override Chain DoTruncateAny(out IChainable tail)
<#
        if (i > 1)
        {
#>
    {
        var chain = TruncateAny(out var t);
        tail = (IChainable) t;
        return chain;
    }
<#
        }
        else
        {
#>
        => throw new InvalidOperationException("Cannot truncate chain of length 1.");
<#
        }
#>

<#
        if (i > 1)
        {
            var shortTList = TypeList(i - 1);
#>
    /// <summary>
    /// Creates a new <see cref="Chain{<#= shortTList #>}"/> with <#= i - 1 #> items, by removing the last item
    /// from the end of this instance.
    /// </summary>
    /// <remarks>
    /// Do not forget to <see cref="IDisposable">dispose</see> this chain if you are no longer using it.
    /// </remarks>
    /// <seealso cref="TruncateAny()" />
    /// <seealso cref="Truncate(out T<#= i - 1 #>)" />
    /// <seealso cref="TruncateAny(out T<#= i - 1 #>)" />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Chain<<#= shortTList #>> Truncate()
        => TruncateAny(out var _);

    /// <summary>
    /// Creates a new <see cref="Chain{<#= shortTList #>}"/> with <#= i - 1 #> items, by removing the last item
    /// from the end of this instance.
    /// </summary>
    /// <remarks>
    /// <para>Do not forget to <see cref="IDisposable">dispose</see> this chain if you are no longer using it.
    /// </para><para>The `Any` versions of chain methods do not validate that items belong in the chain, this is
    /// useful for situations where the specification does not indicate required chain constraints. You should generally
    /// try to use the none `Any` version in preference.</para>
    /// </remarks>
    /// <seealso cref="Truncate()" />
    /// <seealso cref="Truncate(out T<#= i - 1 #>)" />
    /// <seealso cref="TruncateAny(out T<#= i - 1 #>)" />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public new Chain<<#= shortTList #>> TruncateAny()
        => TruncateAny(out var _);

    /// <summary>
    /// Creates a new <see cref="Chain{<#= tList #>}"/> with <#= i - 1 #> items, by removing 
    /// <paramref name="item<#= i - 1 #>"/> from the end of this instance.
    /// </summary>
    /// <param name="item<#= i - 1 #>">The item removed from the end of this instance.</param>
    /// <remarks>
    /// Do not forget to <see cref="IDisposable">dispose</see> this chain if you are no longer using it.
    /// </remarks>
    /// <seealso cref="Truncate()" />
    /// <seealso cref="TruncateAny()" />
    /// <seealso cref="TruncateAny(out T<#= i - 1 #>)" />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Chain<<#= shortTList #>> Truncate(out T<#= i - 1 #> item<#= i - 1 #>)
        => TruncateAny(out item<#= i - 1 #>);

    /// <summary>
    /// Creates a new <see cref="Chain{<#= shortTList #>}"/> with <#= i - 1 #> items, by removing 
    /// <paramref name="item<#= i - 1 #>"/> from the end of this instance.
    /// </summary>
    /// <param name="item<#= i - 1 #>">The item removed from the end of this instance.</param>
    /// <remarks>
    /// <para>Do not forget to <see cref="IDisposable">dispose</see> this chain if you are no longer using it.
    /// </para><para>The `Any` versions of chain methods do not validate that items belong in the chain, this is
    /// useful for situations where the specification does not indicate required chain constraints. You should generally
    /// try to use the none `Any` version in preference.</para>
    /// </remarks>
    /// <seealso cref="Truncate()" />
    /// <seealso cref="TruncateAny()" />
    /// <seealso cref="Truncate(out T<#= i - 1 #>)" />
    public Chain<<#= shortTList #>> TruncateAny(out T<#= i - 1 #> item<#= i - 1 #>)
    {
        // Retrieve last item.
        item<#= i - 1 #> = Item<#= i - 1 #>;

        var newSize = MemorySize - Item<#= i - 1 #>Size;
        var newHeadPtr = SilkMarshal.Allocate(newSize);
        // Block copy original struct data for speed
        System.Buffer.MemoryCopy((void*)_headPtr, (void*)newHeadPtr, newSize, newSize);
        // Update all pointers
<#
            if (i > 2)
            {
#>
        ((BaseInStructure*)newHeadPtr)->PNext = (BaseInStructure*) (newHeadPtr + Item1Offset);
<#
                for (var j = 2; j < i; j++)
                {
#>
        ((BaseInStructure*)(newHeadPtr + Item<#= j - 1 #>Offset))->PNext = <#=
                                    j == i - 1
                                        ? "null"
                                        : $"(BaseInStructure*) (newHeadPtr + Item{j}Offset)" #>; 
<#
                } // for (int j = 1; j < i - 1; j++)
            }
            else // if (i > 1)
            {
#>
        ((BaseInStructure*)newHeadPtr)->PNext = null;
<#
            }
#>
        return new Chain<<#= shortTList #>>(newHeadPtr);
    }

<#
        } // (i > 1)
#>
    /// <inheritdoc />
    public override IEnumerator<IChainable> GetEnumerator()
    {
        yield return Head;
<#
        for (var j = 1; j < i; j++)
        {
#>
        yield return Item<#= j #>;
<#
        } // for (int j = 1; j < i; j++) {
#>
    }

    /// <inheritdoc />
    public override int Count => <#= i #>;

    /// <inheritdoc />
    public override IChainable this[int index]
        => index switch 
        {
            0 => Head,
<#
        for (var j = 1; j < i; j++)
        {
#>
            <#= j #> => Item<#= j #>,
<#
        } // for (int j = 1; j < i; j++) {
#>
            _ => throw new IndexOutOfRangeException()
        };

    /// <summary>
    /// Compares the supplied memory block with this one, ignoring the structure headers.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]  
    protected override bool MemoryEquals(Chain other)
    {
        var ptr = HeadPtr;
        var otherPtr = other.HeadPtr;
        if (ptr == otherPtr) {
            return true;
        }
        var span = new ReadOnlySpan<byte>((void*) ptr, MemorySize);
        var otherSpan = new ReadOnlySpan<byte>((void*) otherPtr, MemorySize);
        var start = 0;
        var length = HeadSize;
        var sliceLength = length - HeaderSize;
        if (sliceLength > 0 && 
            !span.Slice(start + HeaderSize, sliceLength)
                .SequenceEqual(otherSpan.Slice(start + HeaderSize, sliceLength)))
            return false;
<#
        for (var j = 1; j < i; j++)
        {
#>

        start += length;
        length = Item<#=j#>Size;
        sliceLength = length - HeaderSize;
        if (sliceLength > 0 && 
            !span.Slice(start + HeaderSize, sliceLength)
                .SequenceEqual(otherSpan.Slice(start + HeaderSize, sliceLength)))
            return false;
<#
        } // for (int j = 1; j < i; j++) {
#>
        return true;
    }

    /// <inheritdoc />
    public override int GetHashCode()
    {
        var span = new ReadOnlySpan<byte>((void*)_headPtr, MemorySize);
        var start = 0;
        var length = HeadSize;
        var sliceLength = length - HeaderSize;
        var hashCode = 0;
        // Hash the structure type
        var sTYpe = ((BaseInStructure*) (_headPtr + start))->SType;
        hashCode = HashCode.Combine(hashCode, sTYpe);

        // Hash any payload
        if (sliceLength >= 0)
            CombineHash(ref hashCode, span.Slice(start + HeaderSize, sliceLength));
<#
        for (var j = 1; j < i; j++)
        {
#>

        start += length;
        length = Item<#=j#>Size;
        sliceLength = length - HeaderSize;
        sTYpe = ((BaseInStructure*) (_headPtr + start))->SType;
        hashCode = HashCode.Combine(hashCode, sTYpe);
        if (sliceLength >= 0)
            CombineHash(ref hashCode, span.Slice(start + HeaderSize, sliceLength));
<#
        } // for (int j = 1; j < i; j++) {
#>
        return hashCode;
    }

    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]  
    public bool Equals(Chain<<#=tList#>> other)
        => !ReferenceEquals(null, other) && (ReferenceEquals(this, other) || MemoryEquals(other));

    /// <summary>
    ///    Equality operator overload.
    /// </summary>
    /// <param name="left">
    ///    The left value.
    /// </param>
    /// <param name="right">
    ///    The right value.
    /// </param>
    /// <returns>
    ///    <c> true </c> when the instances are equal, otherwise <c> false </c> .
    /// </returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]  
    public static bool operator ==(Chain<<#=tList#>> left, Chain<<#=tList#>> right) => 
        ReferenceEquals(null, left)
        ? ReferenceEquals(null, right)
        : !ReferenceEquals(null, right) && (ReferenceEquals(left, right) || left.MemoryEquals(right));

    /// <summary>
    ///    Inequality operator overload.
    /// </summary>
    /// <param name="left">
    ///    The left value.
    /// </param>
    /// <param name="right">
    ///    The right value.
    /// </param>
    /// <returns>
    ///    <c> true </c> when the instances are not equal, otherwise <c> false </c>.
    /// </returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]  
    public static bool operator !=(Chain<<#=tList#>> left, Chain<<#=tList#>> right) => 
        ReferenceEquals(null, left)
        ? !ReferenceEquals(null, right)
        : ReferenceEquals(null, right) || (!ReferenceEquals(left, right) && !left.MemoryEquals(right));

    /// <inheritdoc />
    public override string ToString()
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("(");
        sb.Append((object) Head);<#
        for (var j = 1; j < i; j++)
        {
#>
        sb.Append(", ");
        sb.Append((object) Item<#= j #>);
<#
} // for (int j = 1; j < i; j++) {
#>
        sb.Append(")");
        return sb.ToString();
    }

    /// <summary>
    /// Deconstructs this chain.
    /// </summary>
<#= pDocs #>
    public void Deconstruct(out TChain head<#
        for (var j = 1; j < i; j++)
        {
#>, out T<#= j #> item<#= j #><#
        } // for (int j = 1; j < i; j++) {
#>)
    {
            head = Head;
<#
        for (var j = 1; j < i; j++)
        {
#>
            item<#= j #> = Item<#= j #>;
<#
        } // for (int j = 1; j < i; j++) {
#>
    }  

    /// <inheritdoc />
    protected override void Dispose(bool disposing)
    {
        var headPtr = Interlocked.Exchange(ref _headPtr, (nint)0);
        if (headPtr == (nint)0) { 
            return;
        }

        // Free memory block
        SilkMarshal.Free(headPtr);
    }

    /// <summary>
    ///   Defines an implicit conversion of a given <see cref="Chain"/> to a pointer to the <see cref="HeadPtr">head</see>.
    /// </summary>
    /// <param name="chain">A <see cref="Chain"/> to implicitly convert.</param>
    /// <returns>A <c>nint</c> pointer to the head of the <paramref name="chain"/>.</returns>
    public static implicit operator nint(Chain<<#= tList #>> chain) => (nint)chain.HeadPtr;

    /// <summary>
    ///   Defines an implicit conversion of a given <see cref="Chain"/> to a pointer to the <see cref="HeadPtr">head</see>.
    /// </summary>
    /// <param name="chain">A <see cref="Chain"/> to implicitly convert.</param>
    /// <returns>A <c>void*</c> pointer to the head of the <paramref name="chain"/>.</returns>
    public static implicit operator void*(Chain<<#= tList #>> chain) => (void*) chain.HeadPtr;

    /// <summary>
    ///   Defines an implicit conversion of a given <see cref="Chain"/> to a pointer to the <see cref="HeadPtr">head</see>.
    /// </summary>
    /// <param name="chain">A <see cref="Chain"/> to implicitly convert.</param>
    /// <returns>A <see cref="BaseInStructure"/><c>*</c> pointer to the head of the <paramref name="chain"/>.</returns>
    public static implicit operator BaseInStructure*(Chain<<#= tList #>> chain) => chain.HeadPtr;

    /// <summary>
    ///   Defines an implicit conversion of a given <see cref="Chain"/> to a pointer to the <see cref="HeadPtr">head</see>.
    /// </summary>
    /// <param name="chain">A <see cref="Chain"/> to implicitly convert.</param>
    /// <returns>A <typeparam ref="TChain"/><c>*</c> pointer to the head of the <paramref name="chain"/>.</returns>
    public static implicit operator TChain*(Chain<<#= tList #>> chain) => (TChain*)chain._headPtr;
}
<#
    } // for (var i = 1; i <= maximumItems; i++)
#>