#nullable enable
Silk.NET.Windowing.APIVersion
Silk.NET.Windowing.APIVersion.APIVersion() -> void
Silk.NET.Windowing.APIVersion.APIVersion(int majorVersion, int minorVersion) -> void
Silk.NET.Windowing.APIVersion.APIVersion(System.Version! version) -> void
Silk.NET.Windowing.APIVersion.MajorVersion -> int
Silk.NET.Windowing.APIVersion.MinorVersion -> int
Silk.NET.Windowing.ContextAPI
Silk.NET.Windowing.ContextAPI.None = 0 -> Silk.NET.Windowing.ContextAPI
Silk.NET.Windowing.ContextAPI.OpenGL = 2 -> Silk.NET.Windowing.ContextAPI
Silk.NET.Windowing.ContextAPI.OpenGLES = 3 -> Silk.NET.Windowing.ContextAPI
Silk.NET.Windowing.ContextAPI.Vulkan = 1 -> Silk.NET.Windowing.ContextAPI
Silk.NET.Windowing.ContextFlags
Silk.NET.Windowing.ContextFlags.Debug = 1 -> Silk.NET.Windowing.ContextFlags
Silk.NET.Windowing.ContextFlags.Default = 0 -> Silk.NET.Windowing.ContextFlags
Silk.NET.Windowing.ContextFlags.ForwardCompatible = 2 -> Silk.NET.Windowing.ContextFlags
Silk.NET.Windowing.ContextProfile
Silk.NET.Windowing.ContextProfile.Compatability = 1 -> Silk.NET.Windowing.ContextProfile
Silk.NET.Windowing.ContextProfile.Core = 0 -> Silk.NET.Windowing.ContextProfile
Silk.NET.Windowing.GraphicsAPI
Silk.NET.Windowing.GraphicsAPI.API.get -> Silk.NET.Windowing.ContextAPI
Silk.NET.Windowing.GraphicsAPI.API.set -> void
Silk.NET.Windowing.GraphicsAPI.Flags.get -> Silk.NET.Windowing.ContextFlags
Silk.NET.Windowing.GraphicsAPI.Flags.set -> void
Silk.NET.Windowing.GraphicsAPI.GraphicsAPI() -> void
Silk.NET.Windowing.GraphicsAPI.GraphicsAPI(Silk.NET.Windowing.ContextAPI api, Silk.NET.Windowing.APIVersion apiVersion) -> void
Silk.NET.Windowing.GraphicsAPI.GraphicsAPI(Silk.NET.Windowing.ContextAPI api, Silk.NET.Windowing.ContextProfile profile, Silk.NET.Windowing.ContextFlags flags, Silk.NET.Windowing.APIVersion apiVersion) -> void
Silk.NET.Windowing.GraphicsAPI.Profile.get -> Silk.NET.Windowing.ContextProfile
Silk.NET.Windowing.GraphicsAPI.Profile.set -> void
Silk.NET.Windowing.GraphicsAPI.Version.get -> Silk.NET.Windowing.APIVersion
Silk.NET.Windowing.GraphicsAPI.Version.set -> void
Silk.NET.Windowing.IMonitor
Silk.NET.Windowing.IMonitor.Bounds.get -> Silk.NET.Maths.Rectangle<int>
Silk.NET.Windowing.IMonitor.Gamma.get -> float
Silk.NET.Windowing.IMonitor.Gamma.set -> void
Silk.NET.Windowing.IMonitor.GetAllVideoModes() -> System.Collections.Generic.IEnumerable<Silk.NET.Windowing.VideoMode>!
Silk.NET.Windowing.IMonitor.Index.get -> int
Silk.NET.Windowing.IMonitor.Name.get -> string!
Silk.NET.Windowing.IMonitor.VideoMode.get -> Silk.NET.Windowing.VideoMode
Silk.NET.Windowing.IView
Silk.NET.Windowing.IView.Close() -> void
Silk.NET.Windowing.IView.Closing -> System.Action?
Silk.NET.Windowing.IView.ContinueEvents() -> void
Silk.NET.Windowing.IView.DoEvents() -> void
Silk.NET.Windowing.IView.DoRender() -> void
Silk.NET.Windowing.IView.DoUpdate() -> void
Silk.NET.Windowing.IView.FocusChanged -> System.Action<bool>?
Silk.NET.Windowing.IView.FramebufferResize -> System.Action<Silk.NET.Maths.Vector2D<int>>?
Silk.NET.Windowing.IView.FramebufferSize.get -> Silk.NET.Maths.Vector2D<int>
Silk.NET.Windowing.IView.Handle.get -> nint
Silk.NET.Windowing.IView.Initialize() -> void
Silk.NET.Windowing.IView.Invoke(System.Delegate! d, params object![]! args) -> object!
Silk.NET.Windowing.IView.IsClosing.get -> bool
Silk.NET.Windowing.IView.IsInitialized.get -> bool
Silk.NET.Windowing.IView.Load -> System.Action?
Silk.NET.Windowing.IView.PointToClient(Silk.NET.Maths.Vector2D<int> point) -> Silk.NET.Maths.Vector2D<int>
Silk.NET.Windowing.IView.PointToFramebuffer(Silk.NET.Maths.Vector2D<int> point) -> Silk.NET.Maths.Vector2D<int>
Silk.NET.Windowing.IView.PointToScreen(Silk.NET.Maths.Vector2D<int> point) -> Silk.NET.Maths.Vector2D<int>
Silk.NET.Windowing.IView.Render -> System.Action<double>?
Silk.NET.Windowing.IView.Reset() -> void
Silk.NET.Windowing.IView.Resize -> System.Action<Silk.NET.Maths.Vector2D<int>>?
Silk.NET.Windowing.IView.Run(System.Action! onFrame) -> void
Silk.NET.Windowing.IView.Time.get -> double
Silk.NET.Windowing.IView.Update -> System.Action<double>?
Silk.NET.Windowing.IViewProperties
Silk.NET.Windowing.IViewProperties.API.get -> Silk.NET.Windowing.GraphicsAPI
Silk.NET.Windowing.IViewProperties.FramesPerSecond.get -> double
Silk.NET.Windowing.IViewProperties.FramesPerSecond.set -> void
Silk.NET.Windowing.IViewProperties.IsContextControlDisabled.get -> bool
Silk.NET.Windowing.IViewProperties.IsContextControlDisabled.set -> void
Silk.NET.Windowing.IViewProperties.IsEventDriven.get -> bool
Silk.NET.Windowing.IViewProperties.IsEventDriven.set -> void
Silk.NET.Windowing.IViewProperties.PreferredBitDepth.get -> Silk.NET.Maths.Vector4D<int>?
Silk.NET.Windowing.IViewProperties.PreferredDepthBufferBits.get -> int?
Silk.NET.Windowing.IViewProperties.PreferredStencilBufferBits.get -> int?
Silk.NET.Windowing.IViewProperties.Samples.get -> int?
Silk.NET.Windowing.IViewProperties.ShouldSwapAutomatically.get -> bool
Silk.NET.Windowing.IViewProperties.ShouldSwapAutomatically.set -> void
Silk.NET.Windowing.IViewProperties.Size.get -> Silk.NET.Maths.Vector2D<int>
Silk.NET.Windowing.IViewProperties.UpdatesPerSecond.get -> double
Silk.NET.Windowing.IViewProperties.UpdatesPerSecond.set -> void
Silk.NET.Windowing.IViewProperties.VideoMode.get -> Silk.NET.Windowing.VideoMode
Silk.NET.Windowing.IViewProperties.VSync.get -> bool
Silk.NET.Windowing.IViewProperties.VSync.set -> void
Silk.NET.Windowing.IWindow
Silk.NET.Windowing.IWindow.BorderSize.get -> Silk.NET.Maths.Rectangle<int>
Silk.NET.Windowing.IWindow.FileDrop -> System.Action<string![]!>?
Silk.NET.Windowing.IWindow.IsClosing.get -> bool
Silk.NET.Windowing.IWindow.IsClosing.set -> void
Silk.NET.Windowing.IWindow.Monitor.get -> Silk.NET.Windowing.IMonitor?
Silk.NET.Windowing.IWindow.Monitor.set -> void
Silk.NET.Windowing.IWindow.Move -> System.Action<Silk.NET.Maths.Vector2D<int>>?
Silk.NET.Windowing.IWindow.Parent.get -> Silk.NET.Windowing.IWindowHost?
Silk.NET.Windowing.IWindow.SetWindowIcon(System.ReadOnlySpan<Silk.NET.Core.RawImage> icons) -> void
Silk.NET.Windowing.IWindow.StateChanged -> System.Action<Silk.NET.Windowing.WindowState>?
Silk.NET.Windowing.IWindowHost
Silk.NET.Windowing.IWindowHost.CreateWindow(Silk.NET.Windowing.WindowOptions opts) -> Silk.NET.Windowing.IWindow!
Silk.NET.Windowing.IWindowPlatform
Silk.NET.Windowing.IWindowPlatform.ClearContexts() -> void
Silk.NET.Windowing.IWindowPlatform.GetMainMonitor() -> Silk.NET.Windowing.IMonitor!
Silk.NET.Windowing.IWindowPlatform.GetMonitors() -> System.Collections.Generic.IEnumerable<Silk.NET.Windowing.IMonitor!>!
Silk.NET.Windowing.IWindowPlatform.GetView(Silk.NET.Windowing.ViewOptions? opts = null) -> Silk.NET.Windowing.IView!
Silk.NET.Windowing.IWindowPlatform.IsApplicable.get -> bool
Silk.NET.Windowing.IWindowPlatform.IsSourceOfView(Silk.NET.Windowing.IView! view) -> bool
Silk.NET.Windowing.IWindowPlatform.IsViewOnly.get -> bool
Silk.NET.Windowing.IWindowProperties
Silk.NET.Windowing.IWindowProperties.IsVisible.get -> bool
Silk.NET.Windowing.IWindowProperties.IsVisible.set -> void
Silk.NET.Windowing.IWindowProperties.Position.get -> Silk.NET.Maths.Vector2D<int>
Silk.NET.Windowing.IWindowProperties.Position.set -> void
Silk.NET.Windowing.IWindowProperties.SharedContext.get -> Silk.NET.Core.Contexts.IGLContext?
Silk.NET.Windowing.IWindowProperties.Size.get -> Silk.NET.Maths.Vector2D<int>
Silk.NET.Windowing.IWindowProperties.Size.set -> void
Silk.NET.Windowing.IWindowProperties.Title.get -> string!
Silk.NET.Windowing.IWindowProperties.Title.set -> void
Silk.NET.Windowing.IWindowProperties.TransparentFramebuffer.get -> bool
Silk.NET.Windowing.IWindowProperties.WindowBorder.get -> Silk.NET.Windowing.WindowBorder
Silk.NET.Windowing.IWindowProperties.WindowBorder.set -> void
Silk.NET.Windowing.IWindowProperties.WindowClass.get -> string?
Silk.NET.Windowing.IWindowProperties.WindowState.get -> Silk.NET.Windowing.WindowState
Silk.NET.Windowing.IWindowProperties.WindowState.set -> void
Silk.NET.Windowing.Monitor
Silk.NET.Windowing.VideoMode
Silk.NET.Windowing.VideoMode.RefreshRate.get -> int?
Silk.NET.Windowing.VideoMode.Resolution.get -> Silk.NET.Maths.Vector2D<int>?
Silk.NET.Windowing.VideoMode.VideoMode() -> void
Silk.NET.Windowing.VideoMode.VideoMode(int refreshRate) -> void
Silk.NET.Windowing.VideoMode.VideoMode(Silk.NET.Maths.Vector2D<int>? resolution = null, int? refreshRate = null) -> void
Silk.NET.Windowing.ViewOptions
Silk.NET.Windowing.ViewOptions.API.get -> Silk.NET.Windowing.GraphicsAPI
Silk.NET.Windowing.ViewOptions.API.set -> void
Silk.NET.Windowing.ViewOptions.FramesPerSecond.get -> double
Silk.NET.Windowing.ViewOptions.FramesPerSecond.set -> void
Silk.NET.Windowing.ViewOptions.IsContextControlDisabled.get -> bool
Silk.NET.Windowing.ViewOptions.IsContextControlDisabled.set -> void
Silk.NET.Windowing.ViewOptions.IsEventDriven.get -> bool
Silk.NET.Windowing.ViewOptions.IsEventDriven.set -> void
Silk.NET.Windowing.ViewOptions.PreferredBitDepth.get -> Silk.NET.Maths.Vector4D<int>?
Silk.NET.Windowing.ViewOptions.PreferredBitDepth.set -> void
Silk.NET.Windowing.ViewOptions.PreferredDepthBufferBits.get -> int?
Silk.NET.Windowing.ViewOptions.PreferredDepthBufferBits.set -> void
Silk.NET.Windowing.ViewOptions.PreferredStencilBufferBits.get -> int?
Silk.NET.Windowing.ViewOptions.PreferredStencilBufferBits.set -> void
Silk.NET.Windowing.ViewOptions.Samples.get -> int?
Silk.NET.Windowing.ViewOptions.Samples.set -> void
Silk.NET.Windowing.ViewOptions.ShouldSwapAutomatically.get -> bool
Silk.NET.Windowing.ViewOptions.ShouldSwapAutomatically.set -> void
Silk.NET.Windowing.ViewOptions.UpdatesPerSecond.get -> double
Silk.NET.Windowing.ViewOptions.UpdatesPerSecond.set -> void
Silk.NET.Windowing.ViewOptions.VideoMode.get -> Silk.NET.Windowing.VideoMode
Silk.NET.Windowing.ViewOptions.VideoMode.set -> void
Silk.NET.Windowing.ViewOptions.ViewOptions() -> void
Silk.NET.Windowing.ViewOptions.ViewOptions(double framesPerSecond, double updatesPerSecond, Silk.NET.Windowing.GraphicsAPI api, bool isVSync, bool shouldSwapAutomatically, Silk.NET.Windowing.VideoMode videoMode, int? preferredDepthBufferBits = null, int? preferredStencilBufferBits = null, Silk.NET.Maths.Vector4D<int>? preferredBitDepth = null, bool isEventDriven = false, int? samples = null, bool isContextControlDisabled = false) -> void
Silk.NET.Windowing.ViewOptions.ViewOptions(Silk.NET.Windowing.WindowOptions opts) -> void
Silk.NET.Windowing.ViewOptions.VSync.get -> bool
Silk.NET.Windowing.ViewOptions.VSync.set -> void
Silk.NET.Windowing.Window
Silk.NET.Windowing.WindowBorder
Silk.NET.Windowing.WindowBorder.Fixed = 1 -> Silk.NET.Windowing.WindowBorder
Silk.NET.Windowing.WindowBorder.Hidden = 2 -> Silk.NET.Windowing.WindowBorder
Silk.NET.Windowing.WindowBorder.Resizable = 0 -> Silk.NET.Windowing.WindowBorder
Silk.NET.Windowing.WindowExtensions
Silk.NET.Windowing.WindowOptions
Silk.NET.Windowing.WindowOptions.API.get -> Silk.NET.Windowing.GraphicsAPI
Silk.NET.Windowing.WindowOptions.API.set -> void
Silk.NET.Windowing.WindowOptions.FramesPerSecond.get -> double
Silk.NET.Windowing.WindowOptions.FramesPerSecond.set -> void
Silk.NET.Windowing.WindowOptions.IsContextControlDisabled.get -> bool
Silk.NET.Windowing.WindowOptions.IsContextControlDisabled.set -> void
Silk.NET.Windowing.WindowOptions.IsEventDriven.get -> bool
Silk.NET.Windowing.WindowOptions.IsEventDriven.set -> void
Silk.NET.Windowing.WindowOptions.IsVisible.get -> bool
Silk.NET.Windowing.WindowOptions.IsVisible.set -> void
Silk.NET.Windowing.WindowOptions.Position.get -> Silk.NET.Maths.Vector2D<int>
Silk.NET.Windowing.WindowOptions.Position.set -> void
Silk.NET.Windowing.WindowOptions.PreferredBitDepth.get -> Silk.NET.Maths.Vector4D<int>?
Silk.NET.Windowing.WindowOptions.PreferredBitDepth.set -> void
Silk.NET.Windowing.WindowOptions.PreferredDepthBufferBits.get -> int?
Silk.NET.Windowing.WindowOptions.PreferredDepthBufferBits.set -> void
Silk.NET.Windowing.WindowOptions.PreferredStencilBufferBits.get -> int?
Silk.NET.Windowing.WindowOptions.PreferredStencilBufferBits.set -> void
Silk.NET.Windowing.WindowOptions.Samples.get -> int?
Silk.NET.Windowing.WindowOptions.Samples.set -> void
Silk.NET.Windowing.WindowOptions.SharedContext.get -> Silk.NET.Core.Contexts.IGLContext?
Silk.NET.Windowing.WindowOptions.ShouldSwapAutomatically.get -> bool
Silk.NET.Windowing.WindowOptions.ShouldSwapAutomatically.set -> void
Silk.NET.Windowing.WindowOptions.Size.get -> Silk.NET.Maths.Vector2D<int>
Silk.NET.Windowing.WindowOptions.Size.set -> void
Silk.NET.Windowing.WindowOptions.Title.get -> string!
Silk.NET.Windowing.WindowOptions.Title.set -> void
Silk.NET.Windowing.WindowOptions.TransparentFramebuffer.get -> bool
Silk.NET.Windowing.WindowOptions.TransparentFramebuffer.set -> void
Silk.NET.Windowing.WindowOptions.UpdatesPerSecond.get -> double
Silk.NET.Windowing.WindowOptions.UpdatesPerSecond.set -> void
Silk.NET.Windowing.WindowOptions.VideoMode.get -> Silk.NET.Windowing.VideoMode
Silk.NET.Windowing.WindowOptions.VideoMode.set -> void
Silk.NET.Windowing.WindowOptions.VSync.get -> bool
Silk.NET.Windowing.WindowOptions.VSync.set -> void
Silk.NET.Windowing.WindowOptions.WindowBorder.get -> Silk.NET.Windowing.WindowBorder
Silk.NET.Windowing.WindowOptions.WindowBorder.set -> void
Silk.NET.Windowing.WindowOptions.WindowClass.get -> string?
Silk.NET.Windowing.WindowOptions.WindowClass.set -> void
Silk.NET.Windowing.WindowOptions.WindowOptions() -> void
Silk.NET.Windowing.WindowOptions.WindowOptions(bool isVisible, Silk.NET.Maths.Vector2D<int> position, Silk.NET.Maths.Vector2D<int> size, double framesPerSecond, double updatesPerSecond, Silk.NET.Windowing.GraphicsAPI api, string! title, Silk.NET.Windowing.WindowState windowState, Silk.NET.Windowing.WindowBorder windowBorder, bool isVSync, bool shouldSwapAutomatically, Silk.NET.Windowing.VideoMode videoMode, int? preferredDepthBufferBits = null, int? preferredStencilBufferBits = null, Silk.NET.Maths.Vector4D<int>? preferredBitDepth = null, bool transparentFramebuffer = false, bool isEventDriven = false, Silk.NET.Core.Contexts.IGLContext? sharedContext = null, int? samples = null, string? windowClass = null, bool isContextControlDisabled = false) -> void
Silk.NET.Windowing.WindowOptions.WindowOptions(Silk.NET.Windowing.ViewOptions opts) -> void
Silk.NET.Windowing.WindowOptions.WindowState.get -> Silk.NET.Windowing.WindowState
Silk.NET.Windowing.WindowOptions.WindowState.set -> void
Silk.NET.Windowing.WindowPlatformAttribute
Silk.NET.Windowing.WindowPlatformAttribute.Type.get -> System.Type!
Silk.NET.Windowing.WindowPlatformAttribute.WindowPlatformAttribute(System.Type! type) -> void
Silk.NET.Windowing.WindowState
Silk.NET.Windowing.WindowState.Fullscreen = 3 -> Silk.NET.Windowing.WindowState
Silk.NET.Windowing.WindowState.Maximized = 2 -> Silk.NET.Windowing.WindowState
Silk.NET.Windowing.WindowState.Minimized = 1 -> Silk.NET.Windowing.WindowState
Silk.NET.Windowing.WindowState.Normal = 0 -> Silk.NET.Windowing.WindowState
static Silk.NET.Windowing.GraphicsAPI.Default.get -> Silk.NET.Windowing.GraphicsAPI
static Silk.NET.Windowing.GraphicsAPI.DefaultVulkan.get -> Silk.NET.Windowing.GraphicsAPI
static Silk.NET.Windowing.GraphicsAPI.None.get -> Silk.NET.Windowing.GraphicsAPI
static Silk.NET.Windowing.Monitor.GetMainMonitor(Silk.NET.Windowing.IView? view) -> Silk.NET.Windowing.IMonitor!
static Silk.NET.Windowing.Monitor.GetMonitors(Silk.NET.Windowing.IView? view) -> System.Collections.Generic.IEnumerable<Silk.NET.Windowing.IMonitor!>!
static Silk.NET.Windowing.VideoMode.Default.get -> Silk.NET.Windowing.VideoMode
static Silk.NET.Windowing.ViewOptions.Default.get -> Silk.NET.Windowing.ViewOptions
static Silk.NET.Windowing.ViewOptions.DefaultVulkan.get -> Silk.NET.Windowing.ViewOptions
static Silk.NET.Windowing.Window.Add(Silk.NET.Windowing.IWindowPlatform! platform) -> void
static Silk.NET.Windowing.Window.ClearCurrentContexts(Silk.NET.Windowing.IView! view) -> void
static Silk.NET.Windowing.Window.Create(Silk.NET.Windowing.WindowOptions options) -> Silk.NET.Windowing.IWindow!
static Silk.NET.Windowing.Window.GetOrDefault<T>() -> T?
static Silk.NET.Windowing.Window.GetView(Silk.NET.Windowing.ViewOptions? options = null) -> Silk.NET.Windowing.IView!
static Silk.NET.Windowing.Window.GetWindowPlatform(bool viewOnly) -> Silk.NET.Windowing.IWindowPlatform?
static Silk.NET.Windowing.Window.IsViewOnly.get -> bool
static Silk.NET.Windowing.Window.Platforms.get -> System.Collections.Generic.IReadOnlyCollection<Silk.NET.Windowing.IWindowPlatform!>!
static Silk.NET.Windowing.Window.Prioritize(Silk.NET.Windowing.IWindowPlatform! platform) -> void
static Silk.NET.Windowing.Window.PrioritizeGlfw() -> void
static Silk.NET.Windowing.Window.PrioritizeSdl() -> void
static Silk.NET.Windowing.Window.Remove(Silk.NET.Windowing.IWindowPlatform! platform) -> void
static Silk.NET.Windowing.Window.ShouldLoadFirstPartyPlatforms(bool shouldLoad) -> void
static Silk.NET.Windowing.Window.TryAdd(string! assemblyName) -> bool
static Silk.NET.Windowing.WindowExtensions.Center(this Silk.NET.Windowing.IWindow! window, Silk.NET.Windowing.IMonitor? monitor = null) -> void
static Silk.NET.Windowing.WindowExtensions.ClearContext(this Silk.NET.Windowing.IView! view) -> void
static Silk.NET.Windowing.WindowExtensions.GetFullSize(this Silk.NET.Windowing.IWindow! window) -> Silk.NET.Maths.Vector2D<int>
static Silk.NET.Windowing.WindowExtensions.Invoke(this Silk.NET.Windowing.IView! view, System.Action! t) -> void
static Silk.NET.Windowing.WindowExtensions.Invoke<T>(this Silk.NET.Windowing.IView! view, System.Func<T>! t) -> T
static Silk.NET.Windowing.WindowExtensions.MakeCurrent(this Silk.NET.Windowing.IView! view) -> void
static Silk.NET.Windowing.WindowExtensions.Run(this Silk.NET.Windowing.IView! view) -> void
static Silk.NET.Windowing.WindowExtensions.SetDefaultIcon(this Silk.NET.Windowing.IWindow! window) -> void
static Silk.NET.Windowing.WindowExtensions.SetWindowIcon(this Silk.NET.Windowing.IWindow! window, ref Silk.NET.Core.RawImage icon) -> void
static Silk.NET.Windowing.WindowExtensions.SwapBuffers(this Silk.NET.Windowing.IView! view) -> void
static Silk.NET.Windowing.WindowOptions.Default.get -> Silk.NET.Windowing.WindowOptions
static Silk.NET.Windowing.WindowOptions.DefaultVulkan.get -> Silk.NET.Windowing.WindowOptions
